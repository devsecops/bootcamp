
Nmap is the Swiss Army knife of network reconnaissance and penetration testing. Used by system administrators and hackers alike, the tool can be used for a variety of tasks ranging from network reconnaissance to discovery of what services are on offer. Nmap is available on most distributions with little configuration,  you can download the binary here: https://nmap.org/ alternatively you can you install Nmap on your system using the following commands: 

sudo apt-get install nmap

yum install nmap -y

Nmap has a rich feature set including target specification, service and version detection, script scanning, OS detection, timing and performance, firewall / IDS evasion and spoofing techniques, scan output and miscellaneous options. Below is a brief introduction for each of the options followed by the Nmap usage help file which will give you some more detail. For further information, options and examples check out the Nmap MAN page: (https://nmap.org/book/man.html)

Passive Reconnaissance

Hackers value reconnaissance as the first step in an effective attack. Probing a network is crucial to knowing what type of attacks to launch. Security professionals, Redteam members and penetration testers do not have the luxury of time that hackers have, however they do recognize the value of reconnaissance. The following examples will help you develop network reconnaissance skills to help you protect your network from intrusion. The goal of reconnaissance is to discover the following information:

Target network IP addresses and hosts

Target network UDP and TCP ports

Target Operating systems


Active Reconnaissance

In active reconnaissance you use tools to discover host information that are active on your target network. Active reconnaissance is noisy! As a security professional, Redteam member or penetration testers you may be able to use active reconnaissance arguments to a greater degree than an attacker would due to time constraint and project limitations. Active reconnaissance is easily detected by firewalls, IDS/IPS etc. due to the aggressive nature of the request being sent

Port Scanning

Once you’ve gathered information about the hosts available in the network you’ll want to find open ports for which you’ll target your attacks. Scan the hosts UDP / TCP ports to determine what type of services are running on the host. Some of the more common services you’ll find on hosts include HTTP, SSH, FTP, SMTP, DNS, DHCP etc.  

Target Specification

To scan a target simply specify a target IP address or hostname. Nmap support CIDR notation so append /24 to the scan in order to scan the 256 hosts in the given range. You can specify given ranges for example 192.168.0-255.1-254 and multiple addresses or hostnames separated by a comma likewise if you’re scanning IPv6 specify the IPv6 address or hostname using the -6 switch. If you have a list of IP’s or hostnames, I recommend you use an input file with the -iL <inputfilename> option. You can scan a random range using -iR <num hosts> or exclude a range of IP’s from the scan by specifying them in the exclude option --excludefile <exclude_file> 

Host Discovery

Hackers usually try to keep their presence hidden and often reduce the range of IP’s they’re scanning to a minimum, script kiddies on the other hand will scan the entire range and every available port making them much easier to detect. Some of the host discovery options will reveal the more interesting hosts for an attacker to focus on, likewise if you’re a system administrator or Redteam member you may only want to check hosts running specific services, 
by default, Nmap does host discovery, if no host discovery options are given it uses the ICMP echo request and then performs a port scan against each host it determines is online. If you perform a scan and no hosts are discovered, attempt the scan with a list scan (-sL) or by disabling ping (-Pn).

Scanning Techniques

The port scanning techniques supported by Nmap range from UDP scan (-sU) and any one of the SCTP scan types (-sY, -sZ) to TCP scans. Nmap performs a SYN Scan by default (-sS) so you don’t have to specify that in your switches. I would recommend testing the range of scanning techniques for their varying results, there are scan techniques like the Null scan (-sN) that does not set any bits (TCP flag header is 0), the FIN scan (-sF) sets just the TCP FIN bit, and the really noisy Xmas scan (-sX) which sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree. Check out the Nmap help file for more scanning options.

Port Specification and Scan Order

You can specify the ports you want to scan, single ports or ranges separated by a hyphen (e.g. 1-65535 or -p- if you want to save on keystrokes). Nmap supports the options to exclude ports, perform fast scans, randomize ports and my personal favorite scan the top ports using the --top-port <n> notation. Fyodor has a some really interesting Defcon/Shmoocon talks about Nmap if you’re interested in doing more research.

Service and Version Detection

Nmap will generally respond with the ports it finds and the associated services, however you would like more detailed information use some of the service and version detection switches for more verbose output, use -sV for version detection, alternatively you can use the –A aggressive switch which enables version detection along with some additional features like OS detection, script scanning, and traceroute.
Script Scanning
Nmap has a powerful scripting engine (NSE), launch nmap with the –sC to enable default scripts or to specify the script you want to use, use the --script switch. Before you get started update your script database with –script-updatedb. Script categories include some of the following, auth, broadcast, brute, default, discovery, dos, exploit, external, fuzzer, intrusive, malware, safe, version, vul for vulnerability and all when you feel like leveling your target! Trustwave came out with an awesome Nmap module that uses Nmap to screenshot web services: https://www.trustwave.com/Resources/SpiderLabs-Blog/Using-Nmap-to-Screenshot-Web-Services/
 

OS Detection

Timing and Performance

Firewall / IDS evasion and Spoofing 

Scan Output and Miscellaneous



Nmap Scan Type, Options and Target Specification Switches
Now that you’re aware of the different types of reconnaissance and scanning options, we can dive into the arguments and switches available for when you are scanning a machine or network. Below is the Nmap scan type help output:

Nmap ( https://nmap.org )
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL <inputfilename>: Input from list of hosts/networks
  -iR <num hosts>: Choose random targets
  --exclude <host1[,host2][,host3],...>: Exclude hosts/networks
  --excludefile <exclude_file>: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers <serv1[,serv2],...>: Specify custom DNS servers
  --system-dns: Use OS's DNS resolver
  --traceroute: Trace hop path to each host
SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags <flags>: Customize TCP scan flags
  -sI <zombie host[:probeport]>: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b <FTP relay host>: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports <port ranges>: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports consecutively - don't randomize
  --top-ports <number>: Scan <number> most common ports
  --port-ratio <ratio>: Scan ports more common than <ratio>
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity <level>: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=<Lua scripts>: <Lua scripts> is a comma separated list of
           directories, script-files or script-categories
  --script-args=<n1=v1,[n2=v2,...]>: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=<Lua scripts>: Show help about scripts.
           <Lua scripts> is a comma-separated list of script-files or
           script-categories.
OS DETECTION:
  -O: Enable OS detection
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take <time> are in seconds, or append 'ms' (milliseconds),
  's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).
  -T<0-5>: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup <size>: Parallel host scan group sizes
  --min-parallelism/max-parallelism <numprobes>: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>: Specifies
      probe round trip time.
  --max-retries <tries>: Caps number of port scan probe retransmissions.
  --host-timeout <time>: Give up on target after this long
  --scan-delay/--max-scan-delay <time>: Adjust delay between probes
  --min-rate <number>: Send packets no slower than <number> per second
  --max-rate <number>: Send packets no faster than <number> per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu <val>: fragment packets (optionally w/given MTU)
  -D <decoy1,decoy2[,ME],...>: Cloak a scan with decoys
  -S <IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/--source-port <portnum>: Use given port number
  --proxies <url1,[url2],...>: Relay connections through HTTP/SOCKS4 proxies
  --data <hex string>: Append a custom payload to sent packets
  --data-string <string>: Append a custom ASCII string to sent packets
  --data-length <num>: Append random data to sent packets
  --ip-options <options>: Send packets with specified ip options
  --ttl <val>: Set IP time-to-live field
  --spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA <basename>: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume <filename>: Resume an aborted scan
  --stylesheet <path/URL>: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir <dirname>: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.

Sample Nmap command line scanning:

•	Scan a single IP - nmap 192.168.0.0
•	Scan a host - nmap http:// scanme.nmap.org
•	Scan a range of IPs - nmap 192.168.0.1-2
•	Scan a subnet - nmap 192.168.0.0/2
•	Scan targets from a text file - nmap -iL textfilecontainingips.txt
•	Scan all 65535 ports - nmap -p- 192.168.0.1

Sample Nmap scan types: 

•	Scan using TCP connect - nmap -sT 192.168.0.1
•	Scan using TCP SYN scan - nmap -sS 192.168.0.1
•	Scan UDP ports - nmap -sU -p [UDP Ports] 192.168.0.1

Same Nmap Service and OS Detection scan types:

•	Default service detection - nmap -A 192.168.0.1
•	More aggressive service detection - nmap -sV 192.168.0.1

Nmap Output Formats:

•	Save Nmap scan to an output to file - nmap -oN nmapscanoutput.txt 192.168.0.1
•	Save Nmap scan results as XML - nmap -oX nmapscanoutput.xml 192.168.0.1
•	Save Nmap results in a grepable format- nmap -oG nmapscanoutput.txt 192.168.0.1
•	Save Nmap scan in all formats - nmap -oA outputfile 192.168.0.1

Nmap Script Scanning Engine :
A list of the NSE libraries can be found here: 

https://nmap.org/nsedoc/

•	Nmap scan using the default safe scripts - nmap -sV -sC 192.168.0.1
•	Nmap script help - nmap --script-help=”backorifice-brute”
•	Nmap scan using a specific NSE script – nmap –script backorifice-brute 192.168.0.1

Here are a list of my personal favorite scripted scans: 

•	Nmap scan using credentials or bypass authentication
o	 nmap –script auth 192.168.0.1 
•	Nmap scan to discover hosts by broadcasting on local network
o	nmap –script broadcast 192.168.0.1
•	Nmap scan to guess passwords on target systems
o	nmap –script brute 192.168.0.1
•	Nmap default scan, also run using the –sC or -A
o	nmap –script default 192.168.0.1
•	Nmap scan to learn more about the host through public sources of information
o	nmap –script discovery 192.168.0.1
•	Nmap scan which may cause denial of service conditions on the host
o	nmap –script dos 192.168.0.1
•	Nmap scan to exploit the target system
o	nmap –script exploit 192.168.0.1
•	Nmap scan to to interact with a third party system not included in the target list
o	nmap –script external 192.168.0.1
•	Nmap scan to send unexpected input in network protocol fields
o	nmap –script fuzzer192.168.0.1
•	Nmap scan to send malicious traffic which may cause crashes or denial of service
o	nmap –script intrusive 192.168.0.1
•	Nmap scan to discover signs of malware infection
o	nmap –script malware 192.168.0.1
•	Nmap scan to san the host using safe scripts
o	nmap –script safe 192.168.0.1
•	Nmap scan to perform protocol and software version detection on the target system
o	nmap –script version 192.168.0.1
•	Nmap scan to scan for known vulnerabilities 
o	nmap –script vul 192.168.0.1

Detecting a Scan

Scanning does not go unnoticed due to the nature of the traffic, network traffic have identifiable patterns which IDS / IPS and firewall manufacturers have recorded them in their rules. If your IDS / IPS or firewall detect regular scans that may be an indication that more attacks are coming. The following devices configured correctly will identify scans coming in from NMap quite easily:

Intrusion Detection System – IDS
Intrusion Prevention System - IPS
Firewalls
Switches

Summary
